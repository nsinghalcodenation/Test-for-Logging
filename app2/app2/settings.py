"""
Django settings for app2 project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
from s3config.config import Config
import ldap
from django_auth_ldap.config import LDAPSearch, LDAPSearchUnion, \
    NestedActiveDirectoryGroupType

# Logging settings can be easily customized. Read more about it in the docs:
# https://docs.djangoproject.com/en/2.0/topics/logging/

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        # This is the handler for all messages in the django hierarchy
        # request logs, server logs, etc
        # https://docs.djangoproject.com/en/2.0/topics/logging/#django-logger
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
        # Replace this with your app name
        'app': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        },
        # Default handler for all logs that haven't been caught by any of the
        # above handlers
        '': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        }
    }
}

secrets_url = os.getenv("SECRETS_URL")
if secrets_url:
    print('Secrets URL found in ENV: {}'.format(secrets_url))
config = Config(secrets_path="secrets.yml",
                test_secrets_path="test/test_secrets.yml",
                secrets_url_var_name="SECRETS_URL")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get_value('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_swagger',
    'health',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CRON_CLASSES = [
    "app.retry_cron.RetrySubmissions",
    "app.retry_cron.FetchCommitId"
]

# DjangoModelPermissionsOrAnonReadOnly is the default authentication class
# It allows read-only access to the API for unauthenticated users
# All other actions require authenticated requests
# We relax this a bit in our code to allow any requests to hit the API, atleast
# during development. Therefore, authentication class is set to AllowAny
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.AllowAny',),
    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework.authentication.SessionAuthentication',),
}


ROOT_URLCONF = 'app2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# env = os.getenv('APP_RUN_ENV')
# if env:
#     print('APP_RUN_ENV found: {}'.format(env))
# else:
TEST_DB_FILE = 'test_db'
env = ''
if 'APP_RUN_ENV' in os.environ:
    env = os.environ['APP_RUN_ENV']
    print("Using env : {}".format(env))
else:
    print('APP_RUN_ENV not set')


if 'test' in sys.argv:
    DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3',
                             'NAME': TEST_DB_FILE}}
else:
    DATABASES = {
        'default': {
            'NAME': os.environ['DB_DATABASE_{}'.format(env)],
            'ENGINE': 'django.db.backends.mysql',
            'USER': os.environ['DB_USER_{}'.format(env)],
            'PASSWORD': os.environ['DB_PASSWORD_{}'.format(env)],
            'HOST': os.environ['DB_HOST_{}'.format(env)],
            'PORT': os.environ['DB_PORT_{}'.format(env)],

            # emoji compatibility in strings for mysql
            'OPTIONS': {'charset': 'utf8mb4'}
        },
    }

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

if config.get_value("LDAP_ENABLED"):
    print('LDAP authentication enabled')
    AUTH_LDAP_SERVER_URI = config.get_value('AUTH_LDAP_SERVER_URI')
    AUTH_LDAP_BIND_DN = config.get_value('AUTH_LDAP_BIND_DN')
    AUTH_LDAP_BIND_PASSWORD = config.get_value('AUTH_LDAP_BIND_PASSWORD')

    AUTH_LDAP_USER_SEARCH = LDAPSearchUnion(
            LDAPSearch(
                    "cn=Users,dc=devfactory,dc=local",
                    ldap.SCOPE_SUBTREE,
                    "(sAMAccountName=%(user)s)"
            ),
            LDAPSearch(
                    "ou=Users,ou=Aurea,dc=devfactory,dc=local",
                    ldap.SCOPE_SUBTREE,
                    "(sAMAccountName=%(user)s)"
            ),
    )

    # Set up the basic group parameters.
    AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
            "cn=Users,dc=devfactory,dc=local",
            ldap.SCOPE_SUBTREE,
            "(objectClass=group)"
    )
    AUTH_LDAP_GROUP_TYPE = NestedActiveDirectoryGroupType(name_attr="cn")

    # Populate the Django user from the LDAP directory.
    AUTH_LDAP_USER_ATTR_MAP = {
        "first_name": "givenName",
        "last_name": "sn",
        "email": "mail"
    }

    AUTH_LDAP_USER_FLAGS_BY_GROUP = {
        "is_active": config.get_value(
                'AUTH_LDAP_USER_GROUPS') + config.get_value(
                'AUTH_LDAP_ADMIN_GROUPS'),
        "is_staff": config.get_value(
                'AUTH_LDAP_USER_GROUPS') + config.get_value(
                'AUTH_LDAP_ADMIN_GROUPS'),
        "is_superuser": config.get_value('AUTH_LDAP_ADMIN_GROUPS'),
    }

    AUTH_LDAP_ALWAYS_UPDATE_USER = True

    # Use LDAP group membership to calculate group permissions.
    AUTH_LDAP_FIND_GROUP_PERMS = True

    AUTH_LDAP_CACHE_GROUPS = True
    AUTH_LDAP_GROUP_CACHE_TIMEOUT = 300

    # Keep ModelBackend around for per-user permissions and maybe a local
    # superuser.
    AUTHENTICATION_BACKENDS = (
        'django_auth_ldap.backend.LDAPBackend',
        'django.contrib.auth.backends.ModelBackend',
    )

STATIC_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')
